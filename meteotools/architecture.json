{
    "build.py": [
        "<class> task",
        "<str> build_name",
        "<str> optimization",
        "<str> source_name",
        "<str> source_type",
        "<str> source_version"
    ],
    "calc.py": [
        "<exception> InputError",
        "<float> A",
        "<float> B",
        "<float> Cp",
        "<float> H",
        "<float> Lv",
        "<float> P0",
        "<float> Rd",
        "<float> T0",
        "<float> g",
        "<float> kappa",
        "<func> FD2(var, delta, axis, cyclic)",
        "<func> FD2_2(var, delta, axis)",
        "<func> FD2_2_back(var, delta, axis)",
        "<func> FD2_2_front(var, delta, axis)",
        "<func> FD2_back(var, delta, axis)",
        "<func> FD2_front(var, delta, axis)",
        "<func> Find_Root2(a, b, c)",
        "<func> NanWeightAvg(a, r)",
        "<func> PtoZ(P0, Tv, P)",
        "<func> ZtoP(P0, Tv, Z)",
        "<func> calc_H(Tv)",
        "<func> calc_RZaverage(var, z_axis, r_axis, rmin, rmax, zmin, zmax, r_weight)",
        "<func> calc_Raverage(var, r_axis, axis, rmin, rmax)",
        "<func> calc_T(theta, P)",
        "<func> calc_Tc(T, P, RH, vapor, qv)",
        "<func> calc_Td(es, P, qv)",
        "<func> calc_Te(T, P, RH, vapor, qv)",
        "<func> calc_Tv(T, P, RH, vapor, qv)",
        "<func> calc_Zaverage(var, z_axis, axis, zmin, zmax)",
        "<func> calc_dTdz(saturated, T, qv)",
        "<func> calc_qv(P, T, RH, vapor, Td)",
        "<func> calc_rho(P, Tv, T, RH, vapor, qv)",
        "<func> calc_saturated_qv(T, P)",
        "<func> calc_saturated_vapor(T)",
        "<func> calc_theta(T, P)",
        "<func> calc_theta_e(T, theta, P, RH, vapor, qv)",
        "<func> calc_theta_e2(P, T, RH, vapor, qv, Te)",
        "<func> calc_theta_es(T, P, theta)",
        "<func> calc_theta_v(T, P, theta, qv, es, RH, Td, ql)",
        "<func> calc_vapor(T, RH)",
        "<func> difference_FFT(var, delta, axis)",
        "<func> fftfreq(n, d)",
        "<func> lonlat2xy(lon, lat, proj, lat_1, lat_2, lat_0, lon_0, x_0, y_0, a, rf, to_meter)",
        "<func> qv2vapor(P, qv)",
        "<func> uv2wswd(u, v)",
        "<func> wswd2uv(ws, wd)",
        "<func> xy2lonlat(xx, yy, proj, lat_1, lat_2, lat_0, lon_0, x_0, y_0, a, rf, to_meter)",
        "<others> fft",
        "<others> ifft"
    ],
    "colors": {
        "cwbcmaps.py": [
            "<class> ListedColormap",
            "<dict> colors",
            "<dict> lvls",
            "<func> cmap(name)",
            "<func> levels(name)"
        ],
        "NCL Graphics  Color Table Gallery_files": {},
        "nclcmaps.py": [
            "<class> ListedColormap",
            "<dict> colors",
            "<func> cmap(name)"
        ],
        "__init__.py": [
            "<func> RGB2colorcode(r, g, b, preview)",
            "<func> colorcode2RGB(colorcode, preview)",
            "<int> b",
            "<int> g",
            "<int> r"
        ],
        "__pycache__": {}
    },
    "exceptions.py": [
        "<exception> DimensionError",
        "<exception> InputError",
        "<exception> UnitError"
    ],
    "fastcompute.py": [
        "<exception> DimensionError",
        "<exception> InputError",
        "<func> Array_isthesame(a, b, tor)",
        "<func> Make_cyclinder_coord(centerLocation, r, theta)",
        "<func> cartesian2cylindrical(dx, dy, car_data, centerLocation, r, theta, xTR, yTR)",
        "<func> check_loc(loc, d, lend, dimname)",
        "<func> interp1D(x_input, x_output, data)",
        "<func> interp1D_fast(dx, xLoc, data)",
        "<func> interp1D_fast_layers(dx, xLoc, data)",
        "<func> interp1D_layers(x_input, x_output, data)",
        "<func> interp2D_fast(dx, dy, xLoc, yLoc, data)",
        "<func> interp2D_fast_layers(dx, dy, xLoc, yLoc, data)",
        "<func> interp3D_fast(dx, dy, dz, xLoc, yLoc, zLoc, data)",
        "<func> interp3D_fast_layers(dx, dy, dz, xLoc, yLoc, zLoc, data)"
    ],
    "fileprocess.py": [
        "<func> Get_time_sec(yr, mo, day, hr, mi, sc, shift)",
        "<func> Get_wrfout_time(yr, mo, day, hr, mi, sc, shift)",
        "<func> mkdir(dirpath)"
    ],
    "modelprocess.py": [
        "<exception> DimensionError",
        "<exception> UnitError",
        "<func> Array_is_the_same(a, b, tor)",
        "<func> Get_wrf_data_cyclinder(filenc, varname, pre, interpHeight, xinterpLoc, yinterpLoc, interp2cylinder, wrfvar)",
        "<func> Make_cyclinder_coord(centerLocation, r, theta)",
        "<func> Make_radial_axis(rmin, rmax, dr, inunit)",
        "<func> Make_tangential_axis(thetastart, thetaend, dtheta, inunit)",
        "<func> Make_vertical_axis(heightstart, heightend, dp, inunit)",
        "<func> Nine_pts_smooth(var)",
        "<func> Three_pts_smooth_H(var)",
        "<func> Three_pts_smooth_V(var)",
        "<func> interp(dx, dy, xLoc, yLoc, data)"
    ],
    "old_modelf": {},
    "package_architecture.py": [
        "<dict> package",
        "<func> isdir(s)",
        "<func> process_dir(above_dir, d)",
        "<func> process_py(pysource)",
        "<list> filters",
        "<others> f",
        "<str> package_dir"
    ],
    "pictureprocess.py": [
        "<func> movie_make(src_dir, video_name, fps, video_fmt)"
    ],
    "__init__.py": [
        "<func> timer(func)",
        "<others> time"
    ],
    "__pycache__": {}
}